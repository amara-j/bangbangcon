{"version":3,"sources":["constants.js","Capture.js","App.js","reportWebVitals.js","index.js"],"names":["keyToNote","a","w","s","e","d","f","t","g","y","h","u","j","k","o","l","p","Capture","props","useState","recording","_setRecording","recordingRef","useRef","setRecording","bool","current","buffer","playKeyboard","key","note","type","synth","triggerAttackRelease","push","Date","now","useEffect","document","addEventListener","className","onClick","length","array","subtractMe","relativeArray","forEach","element","processPerformance","setTimeout","console","log","App","buffer1","buffer2","synth1","Synth","toDestination","synth2","comparePerformances","b","i","compareNotes","threshold","Math","abs","compareRhythm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c1236fe.chunk.js","sourcesContent":["const keyToNote = {\n  a: \"C4\",\n  w: \"C#4\",\n  s: \"D4\",\n  e: \"D#4\",\n  d: \"E4\",\n  f: \"F4\",\n  t: \"F#4\",\n  g: \"G4\",\n  y: \"G#4\",\n  h: \"A4\",\n  u: \"A#4\",\n  j: \"B4\",\n  k: \"C5\",\n  o: \"C#5\",\n  l: \"D5\",\n  p: \"D#5\",\n  \";\": \"E5\",\n};\n\nconst play = (array, synth) => {\n  array.forEach((element) =>\n    setTimeout(function () {\n      synth.triggerAttackRelease(element[1], 0.1);\n    }, element[0])\n  );\n};\n\nconst processPerformance = (array) => {\n  let subtractMe = array[0][0];\n  let relativeArray = array;\n  relativeArray.forEach((element) => (element[0] -= subtractMe));\n  return relativeArray;\n};\n\nexport { keyToNote, processPerformance, play };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { keyToNote, processPerformance, play } from \"./constants.js\";\n\nconst Capture = (props) => {\n  const [recording, _setRecording] = useState(false);\n  const recordingRef = useRef(recording);\n  const setRecording = (bool) => {\n    recordingRef.current = bool;\n    _setRecording(bool);\n  };\n\n  const buffer = props.buffer;\n\n  const clickRecord = () => {\n    setRecording(true);\n    buffer.current.length = 0;\n  };\n\n  const clickStop = () => {\n    if (recordingRef.current) {\n      setRecording(false);\n      if (buffer.current.length > 0) {\n        buffer.current = processPerformance(buffer.current);\n      }\n    }\n  };\n\n  const clickPlay = () => {\n    play(buffer.current, props.synth);\n  };\n\n  const playKeyboard = (e) => {\n    if (keyToNote[e.key]) {\n      const note = keyToNote[e.key];\n      if (e.type === \"keydown\") {\n        props.synth.triggerAttackRelease(note, 0.1);\n      }\n      if (recordingRef.current) {\n        buffer.current.push([Date.now(), note]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", playKeyboard);\n    return function cleanup() {\n      document.addEventListener(\"keydown\", playKeyboard);\n    };\n  }, []);\n\n  return (\n    <div>\n      <button className=\"record\" onClick={clickRecord}>\n        record\n      </button>\n      <button className=\"stop\" onClick={clickStop}>\n        stop\n      </button>\n      <button className=\"play\" onClick={clickPlay}>\n        play\n      </button>\n      <button\n        className=\"consoleLog\"\n        onClick={() => console.log(buffer.current)}\n      >\n        console log this performance\n      </button>\n    </div>\n  );\n};\n\nexport default Capture;\n","import { useRef } from \"react\";\nimport Capture from \"./Capture.js\";\nimport \"./App.css\";\nimport { Synth } from \"tone\";\n\nconst App = () => {\n  const buffer1 = useRef([]);\n  const buffer2 = useRef([]);\n\n  const synth1 = new Synth().toDestination();\n  const synth2 = new Synth().toDestination();\n\n  const compareNotes = (a, b) => {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i][1] !== b[i][1]) {\n        return false;\n      }\n      return true;\n    }\n  };\n\n  const compareRhythm = (a, b, threshold) => {\n    for (let i = 0; i < a.length; i++) {\n      if (Math.abs(a[i][0] - b[i][0]) > threshold) {\n        return false;\n      }\n      return true;\n    }\n  };\n\n  const comparePerformances = (a, b) => {\n    const backBeatThreshold = 500;\n    if (a.length !== b.length) {\n      return false;\n    }\n    let sameNotes = compareNotes(a, b);\n    if (sameNotes === false) {\n      return false;\n    }\n    let sameRhythm = compareRhythm(a, b, backBeatThreshold);\n    if (sameRhythm === false) {\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <div>\n      <div className=\"capture1Container\">\n        <Capture buffer={buffer1} synth={synth1} />\n      </div>\n      <div className=\"capture2Container\">\n        <Capture buffer={buffer2} synth={synth2} />\n      </div>\n      <div className=\"compareContainer\">\n        <button\n          className=\"compare\"\n          onClick={() =>\n            console.log(comparePerformances(buffer1.current, buffer2.current))\n          }\n        >\n          compare!\n        </button>\n      </div>\n      <div className=\"instructionsContainer\">\n        <div className=\"instructions\">\n          welcome! the top two letter rows of your computer keyboard correspond\n          to a piano keyboardâ€“ try playing something! make two recordings using\n          the two rows of record/stop/play buttons. press the compare button to\n          see if the two recordings are similar enough. if they are, you'll see\n          \"true\" in the console :)\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}